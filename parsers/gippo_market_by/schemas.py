from typing import List, Optional, Dict, Any, Union
from pydantic import BaseModel, Field, RootModel, model_validator


class PropertyItem(BaseModel):
    code: str
    type: str
    value: Union[str, int, float, bool, None]
    name: Optional[str] = None
    group: Optional[str] = None

    @model_validator(mode="after")
    def set_group(self):
        if self.group is None:
            if self.code in ["fats", "proteins", "energy", "energyJ", "carbohydrates"]:
                self.group = "–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å"
            else:
                self.group = "–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"
        return self


class Properties(RootModel[Dict[str, PropertyItem]]):
    def __getitem__(self, item: str) -> PropertyItem:
        return self.root[item]

    def get(self, key: str, default=None):
        return self.root.get(key, default)

    def keys(self):
        return self.root.keys()

    def values(self):
        return self.root.values()

    def items(self):
        return self.root.items()


class Manufacturer(BaseModel):
    name: Optional[str]
    country: Optional[str]
    trademark: Optional[str]

    @classmethod
    def from_properties(cls, properties):
        """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç Product.properties. –≠—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ == PropertyItem.code
        """
        # –∏–∑–≤–ª–µ–∫–∞–µ–º PropertyItem –ø–æ –∫–ª—é—á–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã PropertyItem.code
        name_item = properties.get("nameManufacturer")
        country_item = properties.get("nameCountry")
        trade_mark = properties.get("brandText")

        # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å –∞—Ç—Ç—Ä–∏–±—É—Ç–∞–º–∏ name= nameManufacturer.value, country=nameCountry.value –∏ —Ç.–¥
        return cls(
            name=name_item.value if name_item else None,
            country=country_item.value if country_item else None,
            trademark=trade_mark.value if trade_mark else None
        )


class Breadcrumb(BaseModel):
    title: Optional[str] = None
    slug: Optional[str] = None
    parent_title: str | None = Field(default=None, exclude=True)  # –ò—Å–∫–ª—é—á–∞–µ–º –∏–∑ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏, —ç—Ç–æ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö


class Proposal(BaseModel):
    price: float

class Market(BaseModel):
    proposal: Proposal


class ResponseModel(BaseModel):
    markets: List[Market]


class Product(BaseModel):
    id: str
    slug: str
    name: str = Field(..., alias="title")
    barcode: str | None
    description: str | None
    unit: str | None = Field(..., alias="short_name_uom")
    properties: Properties  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ù–æ –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –¥–ª—è —é–∑–∞ –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö
    images: List[str] | None
    manufactory: Optional[Manufacturer] = None   # üëà –æ–±—ä—è–≤–ª—è–µ–º –ø–æ–ª–µ (–µ—Å–ª–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é, –ø–æ–ª—É—á–∏—Ç—Å—è —Ö—É–µ—Ç–∞
    categories:  Optional[List[Breadcrumb]] = Field(None, alias="breadcrumbs") # –∑–∞—á–µ–Ω–∏–µ None –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–∞ breadcrumbs –≤ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º–æ–º –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–µ

    @model_validator(mode="after")  # –í–∞–ª–∏–¥–∞—Ç–æ—Ä –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—è.
    # –í–æ—Ç —Ç–∞–∫–æ–π –≤–∞—Ä–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ @model_validator -> manufactory = Manufacturer.from_properties(self.properties)
    def build_manufactory(self):
        self.manufactory = Manufacturer.from_properties(self.properties)
        # —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ properties
        for key in ("nameManufacturer", "nameCountry", "brandText"):
            if key in self.properties.root:
                del self.properties.root[key]
        return self

    @model_validator(mode='after')
    def set_default_categories(self) -> 'Product':
        # –ï—Å–ª–∏ categories –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –æ–¥–Ω–∏–º Breadcrumb —Å None –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        if self.categories is None:
            self.categories = [Breadcrumb(title=None, slug=None, parent_title=None)]
        # –ï—Å–ª–∏ categories –µ—Å—Ç—å, –Ω–æ —ç—Ç–æ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å None
        elif self.categories == []:
            self.categories = [Breadcrumb(title=None, slug=None, parent_title=None)]
        return self

    markets: List[Market]

    def add_main_category(self, category_title: str, category_slug: str) -> Optional[Breadcrumb]:
        """–û—Ç–≤–µ—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –Ω–µ –≤—Å–µ–≥–¥–∞ –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–æ –≤–Ω–µ—à–Ω–µ–º
            –º–µ—Ç–æ–¥–µ –ø–∞—Ä—Å–µ—Ä–∞ –≥–ª–∞–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—Ç–µ–∫—É—â—É—é –ø–æ –∏—Ç–µ—Ä–∞—Ü–∏–∏) –≤ —Å–ø–∏—Å–æ–∫ Product.categories"""
        titles_list = [i.title for i in self.categories]
        if category_title not in titles_list:
            new_category = Breadcrumb(
                title=category_title,
                slug=category_slug,
                parent_title=None
            )
            self.categories.append(new_category)
        return None

