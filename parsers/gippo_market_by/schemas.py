from typing import List, Optional, Dict, Any, Union
from pydantic import BaseModel, Field, RootModel, model_validator


class PropertyItem(BaseModel):
    code: str
    type: str
    value: Union[str, int, float, bool, None]
    name: Optional[str] = None
    group: Optional[str] = None

    @model_validator(mode="after")
    def set_group(self):
        if self.group is None:
            if self.code in ["fats", "proteins", "energy", "energyJ", "carbohydrates"]:
                self.group = "–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å"
            else:
                self.group = "–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"
        return self


class Properties(RootModel[Dict[str, PropertyItem]]):
    def __getitem__(self, item: str) -> PropertyItem:
        return self.root[item]

    def get(self, key: str, default=None):
        return self.root.get(key, default)

    def keys(self):
        return self.root.keys()

    def values(self):
        return self.root.values()

    def items(self):
        return self.root.items()


class Manufacturer(BaseModel):
    name: Optional[str]
    country: Optional[str]
    trademark: Optional[str]

    @classmethod
    def from_properties(cls, properties):
        """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç Product.properties. –≠—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ == PropertyItem.code
        """
        # –∏–∑–≤–ª–µ–∫–∞–µ–º PropertyItem –ø–æ –∫–ª—é—á–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã PropertyItem.code
        name_item = properties.get("nameManufacturer")
        country_item = properties.get("nameCountry")
        trade_mark = properties.get("brandText")

        # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å –∞—Ç—Ç—Ä–∏–±—É—Ç–∞–º–∏ name= nameManufacturer.value, country=nameCountry.value –∏ —Ç.–¥
        return cls(
            name=name_item.value if name_item else None,
            country=country_item.value if country_item else None,
            trademark=trade_mark.value if trade_mark else None
        )


class Breadcrumb(BaseModel):
    title: Optional[str] = None
    slug: Optional[str] = None
    parent_title: str | None = Field(default=None, exclude=True)  # –ò—Å–∫–ª—é—á–∞–µ–º –∏–∑ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏, —ç—Ç–æ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö


class Proposal(BaseModel):
    price: float

class Market(BaseModel):
    proposal: Proposal


class ResponseModel(BaseModel):
    markets: List[Market]


class Product(BaseModel):
    id: str
    slug: str
    name: str = Field(..., alias="title")
    barcode: str | None
    description: str | None
    unit: str | None = Field(..., alias="short_name_uom")
    properties: Properties  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ù–æ –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –¥–ª—è —é–∑–∞ –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö
    images: List[str] | None
    manufactory: Optional[Manufacturer] = None   # üëà –æ–±—ä—è–≤–ª—è–µ–º –ø–æ–ª–µ (–µ—Å–ª–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é, –ø–æ–ª—É—á–∏—Ç—Å—è —Ö—É–µ—Ç–∞

    @model_validator(mode="after")  # –í–∞–ª–∏–¥–∞—Ç–æ—Ä –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—è.
    # –í–æ—Ç —Ç–∞–∫–æ–π –≤–∞—Ä–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ @model_validator -> manufactory = Manufacturer.from_properties(self.properties)
    def build_manufactory(self):
        self.manufactory = Manufacturer.from_properties(self.properties)
        # —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ properties
        for key in ("nameManufacturer", "nameCountry", "brandText"):
            if key in self.properties.root:
                del self.properties.root[key]
        return self

    categories:  Optional[List[Breadcrumb]] = Field(None, alias="breadcrumbs") # –∑–∞—á–µ–Ω–∏–µ None –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–∞ breadcrumbs –≤ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º–æ–º –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–µ

    @model_validator(mode='after')
    def set_default_categories(self) -> 'Product':
        # –ï—Å–ª–∏ categories –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –æ–¥–Ω–∏–º Breadcrumb —Å None –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        if self.categories is None:
            self.categories = [Breadcrumb(title=None, slug=None, parent_title=None)]
        # –ï—Å–ª–∏ categories –µ—Å—Ç—å, –Ω–æ —ç—Ç–æ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å None
        elif self.categories == []:
            self.categories = [Breadcrumb(title=None, slug=None, parent_title=None)]
        return self

    markets: List[Market]


# # –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# data = \
# {'id': '9b544347-a262-4746-90cd-c65e768cc9ba', 'barcode': '4696666999695', 'title': '–°–∫–∞—Ç–µ—Ä—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è 110—Ö140 —Å–º ', 'slug': 'skatert-odnorazovaya-110h140-sm', 'description': None, 'is_viewed': False, 'images': ['https://app.willesden.by/images/4696666999695.jpg'], 'short_name_uom': '–®–¢', 'container_with_another': 0, 'properties': {'width': {'code': 'width', 'name': '–®–∏—Ä–∏–Ω–∞, –º–º', 'type': 'number', 'value': 200, 'multiple': 'N'}, 'height': {'code': 'height', 'name': '–í—ã—Å–æ—Ç–∞, –º–º', 'type': 'number', 'value': 350, 'multiple': 'N'}, 'length': {'code': 'length', 'name': '–ì–ª—É–±–∏–Ω–∞, –º–º', 'type': 'number', 'value': 10, 'multiple': 'N'}, 'brandText': {'code': 'brandText', 'name': '–ë—Ä–µ–Ω–¥', 'type': 'string', 'value': 'Vip', 'multiple': 'N'}, 'containsGMO': {'code': 'containsGMO', 'name': '–°–æ–¥–µ—Ä–∂–∏—Ç –ì–ú–û', 'type': 'bool', 'value': 0, 'multiple': 'N'}, 'grossWeight': {'code': 'grossWeight', 'name': '–í–µ—Å –±—Ä—É—Ç—Ç–æ, –∫–≥', 'type': 'number', 'value': 0.1, 'multiple': 'N'}, 'nameCountry': {'code': 'nameCountry', 'name': '–°—Ç—Ä–∞–Ω–∞', 'type': 'string', 'value': '–†–û–°–°–ò–Ø', 'multiple': 'N'}, 'nameImporter': {'code': 'nameImporter', 'name': '–ò–º–ø–æ—Ä—Ç–µ—Ä –≤ –†–ë', 'type': 'string', 'value': '–ò–£–ü "–ë–µ–ª–í–∏–ª–ª–µ—Å–¥–µ–Ω",220024, –≥. –ú–∏–Ω—Å–∫, –ø–µ—Ä. –ê—Å–∞–Ω–∞–ª–∏–µ–≤–∞, 3, –∫–æ–º.20', 'multiple': 'N'}, 'nameManufacturer': {'code': 'nameManufacturer', 'name': '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', 'type': 'string', 'value': '-', 'multiple': 'N'}, 'short_name_uom': {'code': 'short_name_uom', 'name': '–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è', 'type': 'string', 'value': '–®–¢', 'multiple': 'N'}}, 'meta': {'title': '–°–∫–∞—Ç–µ—Ä—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è 110—Ö140 —Å–º ', 'description': None}, 'markets': [{'id': 73, 'title': '–ì–ò–ü–ü–û  –≥. –ú–∏–Ω—Å–∫, –ø—Ä-—Ç –†–æ–∫–æ—Å—Å–æ–≤—Å–∫–æ–≥–æ, 2', 'longitude': 27.59487, 'latitude': 53.87502, 'address': '–≥. –ú–∏–Ω—Å–∫, –ø—Ä-—Ç –†–æ–∫–æ—Å—Å–æ–≤—Å–∫–æ–≥–æ, 2', 'phone_number': '+375173670046', 'pick_up_phone_number': '+375445056110', 'is_new': False, 'working_hours': [['08:00', '23:59'], ['08:00', '23:59'], ['08:00', '23:59'], ['08:00', '23:59'], ['08:00', '23:59'], ['08:00', '23:59'], ['08:00', '23:59']], 'opening_hours': [['10:00', '22:00'], ['10:00', '22:00'], ['10:00', '22:00'], ['10:00', '20:00'], ['10:00', '22:00'], ['10:00', '22:00'], ['10:00', '22:00']], 'opened': False, 'market_opened': False, 'city': '–ú–∏–Ω—Å–∫', 'proposal': {'price': 1.57, 'max_qty': 25, 'ignore_max_qty': 0, 'is_promo': 0, 'promo_price_before': None, 'promo_title': '–ê–∫—Ü–∏—è', 'promo_id': None, 'promo_color': None}, 'available_timeslots': ['2025-09-14 10:00:00', '2025-09-14 10:30:00', '2025-09-14 11:00:00', '2025-09-14 11:30:00', '2025-09-14 12:00:00', '2025-09-14 12:30:00', '2025-09-14 13:00:00', '2025-09-14 13:30:00', '2025-09-14 14:00:00', '2025-09-14 14:30:00', '2025-09-14 15:00:00', '2025-09-14 15:30:00', '2025-09-14 16:00:00', '2025-09-14 16:30:00', '2025-09-14 17:00:00', '2025-09-14 17:30:00', '2025-09-14 18:00:00', '2025-09-14 18:30:00', '2025-09-14 19:00:00', '2025-09-14 19:30:00', '2025-09-14 20:00:00', '2025-09-14 20:30:00', '2025-09-14 21:00:00', '2025-09-14 21:30:00'], 'product_count': '19892', 'nearest_available_timeslot': '2025-09-14 02:00:00'}], 'is_package': False, 'pass_scales_step': None, 'age_restrict': None, 'over_sales_limit': None, 'stickers': [], 'meta_categories': ['–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –æ—Ç–¥—ã—Ö', '–ì—Ä–∏–ª–∏ –∏ –º–∞–Ω–≥–∞–ª—ã', '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞'], 'breadcrumbs': [{'title': '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –æ—Ç–¥—ã—Ö', 'slug': 'sportivnye-tovary-i-otdyh'}, {'title': '–ì—Ä–∏–ª–∏ –∏ –º–∞–Ω–≥–∞–ª—ã', 'slug': 'grili-i-mangaly'}, {'title': '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞', 'slug': 'odnorazovaya-posuda'}]}
#
# #
# #
# product = Product(**d)
# print(product.description)
